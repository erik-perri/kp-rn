import AesKdf from '../../../../src/lib/crypto/kdf/AesKdf';

const kdfSeed = new Uint8Array([
  0x93, 0x16, 0xf5, 0x2d, 0x88, 0xe9, 0x3f, 0x08, 0x65, 0xff, 0xaf, 0x96, 0x38,
  0x25, 0xb2, 0x57, 0xc2, 0x60, 0xa3, 0xf4, 0xf8, 0x68, 0xde, 0x6d, 0x6c, 0x14,
  0x0c, 0xf9, 0x15, 0x0e, 0xe7, 0xd3,
]);

const kdfRounds = BigInt(1);

describe('AesKdf', () => {
  it('transforms as expected', () => {
    const sut = new AesKdf(false);
    sut.setSeed(kdfSeed);
    sut.setRounds(kdfRounds);

    const result = sut.transform(
      new Uint8Array([
        0x6d, 0x4e, 0xf6, 0xf4, 0x19, 0xf3, 0x1d, 0x1c, 0x4e, 0xf5, 0xde, 0x55,
        0x82, 0xc0, 0x9a, 0x54, 0x2e, 0x5e, 0x10, 0x05, 0xce, 0xc3, 0x3b, 0xac,
        0xf1, 0xd7, 0xd0, 0x55, 0x0c, 0x45, 0xfc, 0xc1,
      ]),
    );

    expect(result).toEqualUint8Array(
      new Uint8Array([
        0x21, 0xf1, 0x6a, 0xe7, 0x24, 0x41, 0xff, 0x84, 0x82, 0xf0, 0x4a, 0x87,
        0x58, 0xc8, 0xac, 0xd6, 0x54, 0x55, 0x3a, 0xfe, 0x24, 0x0c, 0x43, 0xf2,
        0x6f, 0x48, 0xf4, 0x03, 0xb0, 0x6c, 0xf3, 0xcd,
      ]),
    );
  });
});
